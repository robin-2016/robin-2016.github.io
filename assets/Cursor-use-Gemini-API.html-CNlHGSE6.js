import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as n,o as s}from"./app-BeOVopqw.js";const t="/assets/images/cursor-gemini.png",a={};function o(l,e){return s(),r("div",null,e[0]||(e[0]=[n('<h1 id="cursor使用谷歌gemini-api" tabindex="-1"><a class="header-anchor" href="#cursor使用谷歌gemini-api"><span>Cursor使用谷歌Gemini API</span></a></h1><p>Cursor本身是收费产品，在Cursor试用期过后，调用Cursor模型速率会下降，需要排队等待，现在谷歌Gemini API是暂时不收费的，上下文也足够长，本文配置Cursor使用Gemini API并进行编程体验。</p><h2 id="配置使用gemini-api" tabindex="-1"><a class="header-anchor" href="#配置使用gemini-api"><span>配置使用Gemini API</span></a></h2><p>在Cursor的设置，模型，找到Google API Key，点击“your Google AI Studio key”链接，在浏览器中会打开Google AI Studio网站，点击创建API密钥，将生成的密钥保存一份，并填到Cursor中，现在Cursor聊天就是调用Gemini API了。</p><figure><img src="'+t+`" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>配置其他模型API后，Cursor将不能自动补全，主要通过聊天来生成代码，需要手动复制生成的代码到具体代码文件中，虽然效率低一些，但不花钱。</p><h2 id="编程新姿势" tabindex="-1"><a class="header-anchor" href="#编程新姿势"><span>编程新姿势</span></a></h2><h3 id="_1-编写描述详细的readme-md文档" tabindex="-1"><a class="header-anchor" href="#_1-编写描述详细的readme-md文档"><span>1.编写描述详细的README.md文档</span></a></h3><p>AI可以通过README.md和已有的代码，快速了解整个项目，所以写得越详细越好，推荐中README.md文件中写项目介绍、技术栈、功能描述、名词解释和目录结构这几方面，可以参考GitHub上一些比较有名的项目。</p><h3 id="_2-聊天生成代码" tabindex="-1"><a class="header-anchor" href="#_2-聊天生成代码"><span>2.聊天生成代码</span></a></h3><p>使用快捷键Ctrl/Cmd + L打开聊天窗口，先使用@Codebase，让Cursor读取已有的整个项目，上面文档写得越详细，AI模型了解得越清楚，相当于基于当前项目进行了一次RAG，在后续聊天生成代码就会更符合需求了。</p><h3 id="_3-具体示例" tabindex="-1"><a class="header-anchor" href="#_3-具体示例"><span>3.具体示例</span></a></h3><p>我先搭建了Gin运行的基础框架后，之后就是生成数据库模型model，下面是我的一些提示词。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Generate database model based on functional description and existing code，use </span></span>
<span class="line"><span>in Gin framework</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>会根据已有的功能文档和代码，生成对应的数据库模型，基本都符合功能文档要求。聊天框上下文是有记忆的，只需要输入新的要求即可，我不想在数据库中使用外键，在聊天框中输入“Don&#39;t use foreignkey”，会生成对应无外键版本的数据库模型。默认GORM是使用uint作为数据库主键的，且是自增长的，会被猜到主键，想改为使用uuid，在聊天框中输入“gorm.Model ID don&#39;t use uint type, use uuid”后，会重新生成对应使用uuid的数据库模型，这里选用了<a href="https://github.com/gofrs/uuid" target="_blank" rel="noopener noreferrer">https://github.com/gofrs/uuid</a>这个uuid库，我又在GitHub上搜索golang语言uuid库，看还有没有其他uuid库，发现了谷歌的uuid库：<a href="https://github.com/google/uuid" target="_blank" rel="noopener noreferrer">https://github.com/google/uuid</a>，在搜索对比了一下两者不同，选择使用谷歌的uuid库。后面又增加了数据库模型注释，基本数据库模型model都已生成完成了，效率相当可以。</p><p>最终的整个生成数据库模型提示词如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Generate database model based on functional description and existing code，use </span></span>
<span class="line"><span>in Gin framework，don&#39;t use foreignkey, gorm.Model ID don&#39;t use uint type, use </span></span>
<span class="line"><span>google uuid, add gorm Chinese comment, like \`gorm:&quot;comment:菜单名称&quot;\`</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每次代码后面还有较为详细的解释，数据库模型model使用示例，在启动项目时，还遇到两个错误，也是在聊天中处理的，如果有疑问也可以在聊天中继续问。一会功夫，十几个模型代码文件都已生成好，设置启动时GORM自动数据库迁移，正常启动后会在数据库中创建模型对应的数据库表，最终十几张表就生成中数据库中了。</p><p>最主要是要先写好项目文档，且越详细越好，AI模型生成的就会越符合要求，效率就会越高。对生成的代码有自己的判断，总体来说Gemini生成代码质量还是不错的。</p><p>Gemini 2.0是支持多模态的，要是Cursor能对接上多模态就更给力了，直接根据应用程序截图的图片生成代码，哈哈哈！</p>`,20)]))}const p=i(a,[["render",o],["__file","Cursor-use-Gemini-API.html.vue"]]),m=JSON.parse('{"path":"/posts/Cursor-use-Gemini-API.html","title":"Cursor使用谷歌Gemini API","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2025-01-19T00:00:00.000Z","star":true,"category":["AI"],"tag":["Gemini","Cursor"],"description":"Cursor使用谷歌Gemini API Cursor本身是收费产品，在Cursor试用期过后，调用Cursor模型速率会下降，需要排队等待，现在谷歌Gemini API是暂时不收费的，上下文也足够长，本文配置Cursor使用Gemini API并进行编程体验。 配置使用Gemini API 在Cursor的设置，模型，找到Google API Key...","head":[["meta",{"property":"og:url","content":"https://robin-2016.github.io/posts/Cursor-use-Gemini-API.html"}],["meta",{"property":"og:site_name","content":"RobinDevNotes"}],["meta",{"property":"og:title","content":"Cursor使用谷歌Gemini API"}],["meta",{"property":"og:description","content":"Cursor使用谷歌Gemini API Cursor本身是收费产品，在Cursor试用期过后，调用Cursor模型速率会下降，需要排队等待，现在谷歌Gemini API是暂时不收费的，上下文也足够长，本文配置Cursor使用Gemini API并进行编程体验。 配置使用Gemini API 在Cursor的设置，模型，找到Google API Key..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://robin-2016.github.io/assets/images/cursor-gemini.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"Gemini"}],["meta",{"property":"article:tag","content":"Cursor"}],["meta",{"property":"article:published_time","content":"2025-01-19T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Cursor使用谷歌Gemini API\\",\\"image\\":[\\"https://robin-2016.github.io/assets/images/cursor-gemini.png\\"],\\"datePublished\\":\\"2025-01-19T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Robin\\",\\"url\\":\\"https://robin-2016.github.io\\"}]}"]]},"headers":[{"level":2,"title":"配置使用Gemini API","slug":"配置使用gemini-api","link":"#配置使用gemini-api","children":[]},{"level":2,"title":"编程新姿势","slug":"编程新姿势","link":"#编程新姿势","children":[{"level":3,"title":"1.编写描述详细的README.md文档","slug":"_1-编写描述详细的readme-md文档","link":"#_1-编写描述详细的readme-md文档","children":[]},{"level":3,"title":"2.聊天生成代码","slug":"_2-聊天生成代码","link":"#_2-聊天生成代码","children":[]},{"level":3,"title":"3.具体示例","slug":"_3-具体示例","link":"#_3-具体示例","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":3.37,"words":1012},"filePathRelative":"posts/Cursor-use-Gemini-API.md","localizedDate":"2025年1月19日","excerpt":"\\n<p>Cursor本身是收费产品，在Cursor试用期过后，调用Cursor模型速率会下降，需要排队等待，现在谷歌Gemini API是暂时不收费的，上下文也足够长，本文配置Cursor使用Gemini API并进行编程体验。</p>\\n<h2>配置使用Gemini API</h2>\\n<p>在Cursor的设置，模型，找到Google API Key，点击“your Google AI Studio key”链接，在浏览器中会打开Google AI Studio网站，点击创建API密钥，将生成的密钥保存一份，并填到Cursor中，现在Cursor聊天就是调用Gemini API了。</p>\\n<figure><img src=\\"/assets/images/cursor-gemini.png\\" alt=\\"image.png\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>image.png</figcaption></figure>","autoDesc":true}');export{p as comp,m as data};
